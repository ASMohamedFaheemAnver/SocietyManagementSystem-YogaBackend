scalar Upload

type Message {
  message: String!
}

type AuthData {
  token: String!
  _id: String!
  expiresIn: Int!
}

type Society {
  _id: ID!
  name: String!
  email: String!
  imageUrl: String!
  address: String!
  phoneNumber: String!
  regNo: String!
  approved: Boolean!
  month_fee: MonthlyFee!
  expected_income: Int!
  current_income: Int!
  number_of_members: Int!
}

type Track {
  is_paid: Boolean!
  _id: String!
  member: Member!
}

type Fee {
  _id: ID!
  amount: Int!
  date: String!
  description: String!
  tracks: [Track!]!
}

type SocietyLog {
  _id: ID!
  kind: String!
  fee: Fee
}

type SocietyLogInfo {
  logs: [SocietyLog!]!
  logs_count: Int!
}

type MonthlyFee {
  _id: ID
  description: String!
  amount: Int!
}

input SocietyInputData {
  email: String!
  name: String!
  password: String!
  address: String!
  phoneNumber: String!
  regNo: String!
  image: Upload!
}

input MemberInputData {
  email: String!
  name: String!
  password: String!
  image: Upload!
  address: String!
  societyId: String!
  phoneNumber: String!
}

type Member {
  _id: ID!
  name: String!
  email: String!
  imageUrl: String!
  address: String!
  arrears: Int!
  approved: Boolean!
}

type MemberLog {
  _id: ID!
  kind: String!
  fee: Fee
}

type BasicSocietyData {
  _id: ID!
  name: String!
}

type MemberLogInfo {
  logs: [MemberLog!]!
  logs_count: Int!
}

type Query {
  loginDeveloper(email: String!, password: String!): AuthData!
  getAllSocieties: [Society!]!
  getBasicSocietyDetailes: [BasicSocietyData!]!
  loginSociety(email: String!, password: String!): AuthData!
  getSociety: Society!
  getSocietyLogs(page_number: Int!, page_size: Int!): SocietyLogInfo!
  getAllMembers: [Member!]!
  loginMember(email: String!, password: String!): AuthData!
  getMember: Member!
  getMemberLogs(page_number: Int!, page_size: Int!): MemberLogInfo!
  getAllSocietyMembers: [Member!]!
}

type Mutation {
  approveSociety(societyId: String!): Message!
  disApproveSociety(societyId: String!): Message!
  createSociety(societyInput: SocietyInputData!): Society!
  createMember(memberInput: MemberInputData!): Member!
  addMonthlyFeeToEveryone(monthlyFee: Int!, description: String!): SocietyLog!
  addExtraFeeToEveryone(extraFee: Int!, description: String!): SocietyLog!
  makeFeePaidForOneMember(track_id: ID!, log_id: ID!): Message!
  makeFeeUnPaidForOneMember(track_id: ID!, log_id: ID!): Message!
  approveMember(memberId: String!): Message!
  disApproveMember(memberId: String!): Message!
  editFeeForEveryone(log_id: ID!, fee: Int!, description: String!): SocietyLog!
  deleteFeeLog(log_id: ID!): Message!
}

type Subscription {
  listenMemberLog: logSubscriptionPayload!
  listenMemberLogTrack: logTrackSubscriptionPayload!
}

enum MutationType {
  POST
  PUT
  DELETE
}

type logSubscriptionPayload {
  log: MemberLog!
  type: MutationType!
}

type logTrackSubscriptionPayload {
  log: MemberLog!
  type: MutationType!
}
